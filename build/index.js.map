{"version":3,"sources":["../index.js"],"names":["msg_types","Sphinx","MSG_TYPE","require","config","redis","storage","createClient","process","env","REDISCLOUD_URL","no_ready_check","initted","console","log","sphinxToken","SPHINX_TOKEN","init","client","Client","login","on","INSTALL","message","embed","MessageEmbed","setAuthor","setDescription","setThumbnail","botSVG","channel","send","MESSAGE","arr","content","split","length","cmd","response","isAdmin","member","roles","find","role","name","tribeId","id","getLatestEpisode","episodeData","joinPodWatch","episodeId","embed2","setTitle","embed3","addFields","value","setInterval","keys","err","asyncForEach","checkForLatest","fetch","r","json","tribeData","feed_url","r2","feedData","episodes","set","array","callback","index","key","get","storedId","relevantChannel","channels","cache","addDescription","title"],"mappings":"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","sourcesContent":["import 'regenerator-runtime/runtime.js';\nimport * as Sphinx from 'sphinx-bot'\nimport * as fetch from 'node-fetch'\nconst msg_types = Sphinx.MSG_TYPE\nrequire('dotenv').config();\nvar redis = require('redis');\nvar storage = redis.createClient(process.env.REDISCLOUD_URL, {no_ready_check: true});\n\nlet initted = false\n\nconsole.log(\"bot connected\")\n\n/*\n// SPHINX_TOKEN contains id,secret,and url\n// message.channel.send sends to the url the data\n*/\n\nconst sphinxToken = process.env.SPHINX_TOKEN\n\n\n//ON INSTALL:\n//get tribe ID\n//plug tribe ID into https://tribes.sphinx.chat/tribes/ID\n//await fetch() from above url\n//pull feed_url from above url\n//plug feed_url into https://tribes.sphinx.chat/podcast?url=FEED_URL\n//pull \"episodes\" array, first object, id: number\n//store epidode ID number in object with storage.set(TRIBE_UUID, LATEST_EPISODE_ID)\n//send install message\n\n\n\n\n\n\nfunction init() {\n  if (initted) return\n  initted = true\n  console.log(\"Bot Connected\")\n\n  const client = new Sphinx.Client()\n  client.login(sphinxToken)\n\n  client.on(msg_types.INSTALL, async (message) => {\n\n    const embed = new Sphinx.MessageEmbed()\n      .setAuthor('PodBot')\n      .setDescription('Welcome to Pod Bot!')\n      .setThumbnail(botSVG)\n    message.channel.send({ embed })\n\n  })\n\n\n  client.on(msg_types.MESSAGE, async (message) => {\n    const arr = message.content.split(' ')\n    if (arr.length < 2) return\n    if (arr[0] !== '/pod') return\n    const cmd = arr[1]\n\n    switch (cmd) {\n\n      case 'watch':\n        console.log(\"=> watch\")\n        let response = 'PodBot will notify your tribe when a new episode is released'\n        const isAdmin = message.member.roles.find(role => role.name === 'Admin')\n        console.log('=> IS ADMIN?', isAdmin)\n        if(!isAdmin) return\n          const tribeId = message.channel.id\n          const episodeData = await getLatestEpisode(tribeId)\n\n          if(episodeData && episodeData.id) {\n            joinPodWatch(tribeId, episodeId)\n          } else {\n            response = 'There is no podcast associated with this tribe'\n          }\n          \n          const embed2 = new Sphinx.MessageEmbed()\n            .setAuthor('PodBot')\n            .setTitle('Status:')\n            .setDescription(response)\n            .setThumbnail(botSVG)\n          message.channel.send({ embed:embed2 })\n\n        return\n\n      default:\n        const embed3 = new Sphinx.MessageEmbed()\n          .setAuthor('PodBot')\n          .setTitle('PodBot Commands:')\n          .addFields([\n            { name: 'Watch for new episodes', value: '/pod watch' },\n            { name: 'Help', value: '/pod help' }\n          ])\n          .setThumbnail(botSVG)\n        message.channel.send({ embed:embed3 })\n        return\n    }\n  })\n}\n\nconst botSVG = `<svg viewBox=\"64 64 896 896\" height=\"12\" width=\"12\" fill=\"white\">\n  <path d=\"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" />\n</svg>`\n\ninit()\n\nsetInterval(function ()\n  {\n    client.keys('*', function (err, keys) {\n      if (err) return console.log(err);\n\n      asyncForEach(keys, checkForLatest)\n\n    })\n  }, 300000);\n\n\n\n\nasync function getLatestEpisode(tribeId){\n  try{\n    const r = await fetch(`https://tribes.sphinx.chat/tribes/${tribeId}`)\n    const tribeData = await r.json()\n    if (tribeData && tribeData.feed_url) {\n      const r2 = await fetch(`https://tribes.sphinx.chat/podcast?url=${value}`);\n      const feedData = await r2.json()\n      if (feedData && feedData.episodes && feedData.episodes[0]) {\n        return feedData.episodes[0]\n      }\n    }\n  }\n  catch(e) {\n    console.log('error')\n  }\n}\n\nfunction joinPodWatch(tribeId, episodeId) {\n    storage.set(tribeId, episodeId);\n}\n\n\nasync function asyncForEach(array, callback) {\n\tfor (let index = 0; index < array.length; index++) {\n\t  \tawait callback(array[index], index, array);\n\t}\n}\n\nfunction checkForLatest(key, index, keys) {\n\n  if(key.length!==92) return\n\n  storage.get(key, async function (err, storedId) {\n\n    if(storedId.length!==10) return\n\n    const episodeData = await getLatestEpisode(key)\n    if(!(episodeData && episodeData.id)) return\n    if(storedId === episodeData.id) return\n    storage.set(key, episodeData.id)\n\n    const relevantChannel = client.channels.cache.get(key)\n    if(!relevantChannel) return\n\n    const embed = new Sphinx.MessageEmbed()\n          .setAuthor('PodBot')\n          .setTitle('New Episode!')\n          .addDescription(episodeData.title)\n          .setThumbnail(botSVG)\n        relevantChannel.send({ embed })\n\n  });\n\n\n\n\n}\n\n//EVERY FIVE MINUTES:\n// setInterval(function ()\n// {\n// }, 300000);\n//\n//const allKeys = storage.keys('*')\n\n//AsyncForEach:\n//  plug each tribe ID into https://tribes.sphinx.chat/tribes/ID\n//  await fetch() from above url\n//  pull feed_url from above url\n//  plug feed_url into https://tribes.sphinx.chat/podcast?url=FEED_URL\n//  pull \"episodes\" array, first object, id: number\n\n//  Check if episode ID matches stored ID\n//  IF YES: Return\n\n//  IF NOT: Replace with epidode ID number in object with storage.set(TRIBE_UUID, LATEST_EPISODE_ID)\n//  Send message to tribe announcing New Episode\n\n"],"file":"index.js"}